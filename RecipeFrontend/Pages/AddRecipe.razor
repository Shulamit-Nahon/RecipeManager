@page "/recipes/add"
@using RecipeFrontend.DTOs
@using RecipeFrontend.Services
@inject RecipeService recipeService
@inject CategoryService categoryService
@inject NavigationManager navigationManager

<EditForm Model="newRecipe" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label class="form-label">Title</label>
        <InputText class="form-control" @bind-Value="newRecipe.Title"></InputText>
        <ValidationMessage For="@(() => newRecipe.Title)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Description</label>
        <InputText class="form-control" @bind-Value="newRecipe.Description"></InputText>
        <ValidationMessage For="@(() => newRecipe.Description)" />

    </div>
    @if (categories != null && categories.Any())
    {
        <div class="mb-3">
            <label class="form-label">Category</label>
            <select class="form-select" @bind="newRecipe.CategoryId">
                <option disabled value="0">-- Choose a category --</option>
                @foreach (var category in categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }

            </select>
            <ValidationMessage For="@(() => newRecipe.CategoryId)" />


        </div>
    }
    <div class="mb-3">
        <label class="form-label mb-3">Ingredients</label>
        @if (newRecipe.Ingredients != null && newRecipe.Ingredients.Count > 0)
        {
            @for (int i = 0; i < newRecipe.Ingredients.Count; i++)
            {
                var index = i;
                <div class="input-group mb-2">
                    <InputText class="form-control" placeholder="Name"
                               @bind-Value="newRecipe.Ingredients[index].Name" />

                    <InputText class="form-control" placeholder="Quantity"
                               @bind-Value="newRecipe.Ingredients[index].Quantity" />

                    <button class="btn btn-outline-danger" type="button"
                            @onclick="@(() => RemoveIngredient(index))">
                        –
                    </button>
                </div>
                <div class="text-danger small">
                    <ValidationMessage For="@(() => newRecipe.Ingredients[index].Name)" />
                    <ValidationMessage For="@(() => newRecipe.Ingredients[index].Quantity)" />
                </div>
            }

        }
        <ValidationMessage For="@(() => newRecipe.Ingredients)" />
        <button class="btn btn-outline-primary mb-3" type="button" @onclick="AddIngredient">+ Add Ingredient</button>
    </div>

    <div class="mb-3">
        <label class="form-label mb-3">Steps</label>
        @if (newRecipe.Steps != null && newRecipe.Steps.Count > 0)
        {
            @for (int i = 0; i < newRecipe.Steps.Count; i++)
            {
                var index = i;
                <div class="d-flex gap-2 mb-2 align-items-center">
                    <span class="input-group-text">Step @newRecipe.Steps[index].Order</span>
                    <InputText class="form-control" placeholder="Instruction"
                               @bind-Value="newRecipe.Steps[index].Instruction" />

                    <button class="btn btn-outline-danger" type="button"
                            @onclick="@(() => RemoveStep(index))">
                        –
                    </button>

                </div>
                <div class="text-danger small">
                    <ValidationMessage For="@(() => newRecipe.Steps[index].Instruction)" />
                </div>


            }

        }
        <ValidationMessage For="@(() => newRecipe.Steps)" />

        <button class="btn btn-outline-primary mb-3" type="button" @onclick="AddStep">+ Add Step</button>
    </div>
    @* <div class="mb-3">
        <InputFile OnChange="HandleFileSelected" />
    </div> *@

    <button class="btn btn-primary mb-3" type="submit">Add Recipe</button>
</EditForm>

@code {
    private RecipeCreateDto newRecipe = new();
    private List<CategoryDto>? categories;
    IBrowserFile? selectedImage;

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryService.GetAllCategoriesAsync();

        newRecipe.Ingredients = new List<IngredientDto> { new IngredientDto() };
        newRecipe.Steps = new List<StepDto> { new StepDto { Order = 1 } };
    }
    protected async Task HandleValidSubmit()
    {
        await recipeService.AddRecipeAsync(newRecipe, selectedImage);
        navigationManager.NavigateTo("/");
    }

    private void AddIngredient()
    {
        newRecipe.Ingredients.Add(new IngredientDto());
    }

    private void RemoveIngredient(int index)
    {
        if (index >= 0 && index < newRecipe.Ingredients.Count)

        {
            newRecipe.Ingredients.RemoveAt(index);
        }
    }

    private void AddStep()
    {
        int nextOrder = newRecipe.Steps.Count + 1;

        newRecipe.Steps.Add(new StepDto
        {
            Order = nextOrder,
            Instruction = ""
        });
    }

    private void RemoveStep(int index)
    {
        if (index >= 0 && index < newRecipe.Steps.Count)
        {
            newRecipe.Steps.RemoveAt(index);
            for (int i = 0; i < newRecipe.Steps.Count; i++)
            {
                newRecipe.Steps[i].Order = i + 1;
            }
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedImage = e.File;
    }

}
